diff --git a/src/app/(dashboard)/session.tsx b/src/app/(dashboard)/session.tsx
index f016ed9..199a610 100644
--- a/src/app/(dashboard)/session.tsx
+++ b/src/app/(dashboard)/session.tsx
@@ -22,8 +22,7 @@ export function Session({
 }: {
   session: SessionData;
   onDelete: (sessionId: string) => void;
-  }) {
-
+}) {
   return (
     <TableRow>
       <TableCell className="font-medium text-base">
@@ -33,11 +32,13 @@ export function Session({
         <Badge
           variant="outline"
           className={`capitalize ${
-            session.active && session.num_sessions > 0 && session.num_sessions > session.num_finished
+            session.active &&
+            session.num_sessions > 0 &&
+            session.num_sessions > session.num_finished
               ? 'bg-lime-100 text-lime-900'
               : session.active && session.num_sessions === 0 // Draft
                 ? 'bg-purple-100 text-purple-900'
-                : ''  // Finished, remain white
+                : '' // Finished, remain white
           }`}
         >
           {session.status}
@@ -83,13 +84,16 @@ export function Session({
             </DropdownMenuItem> */}
             <DropdownMenuItem>
               <form
+                className="w-full"
                 action={async () => {
                   if (await deleteSession(session.id)) {
                     onDelete(session.id);
                   }
                 }}
               >
-                <button type="submit">Delete</button>
+                <button type="submit" className="w-full text-left">
+                  Delete
+                </button>
               </form>
             </DropdownMenuItem>
           </DropdownMenuContent>
diff --git a/src/app/api/gptUtils.ts b/src/app/api/gptUtils.ts
index 1ae43af..c4eb867 100644
--- a/src/app/api/gptUtils.ts
+++ b/src/app/api/gptUtils.ts
@@ -1,41 +1,65 @@
 'use server';
-import { NewMessage } from "@/lib/schema_updated";
-import { AssistantMessageData, OpenAIMessage } from "@/lib/types";
-import { NextResponse } from "next/server";
-import OpenAI from "openai";
+import { NewMessage } from '@/lib/schema_updated';
+import { AssistantMessageData, OpenAIMessage } from '@/lib/types';
+import { NextResponse } from 'next/server';
+import OpenAI from 'openai';
 
 const client = new OpenAI({
   apiKey: process.env.OPENAI_API_KEY,
 });
 
-export async function handleCreateThread(messageData?: OpenAIMessage, additionalContext?: string[]) {
+export async function handleCreateThread(
+  messageData?: OpenAIMessage,
+  additionalContext?: string[],
+) {
   if (messageData) {
     const thread = await client.beta.threads.create({
-      messages: [{
-        role: messageData.role,
-        content: messageData.content,
-      }],
+      messages: [
+        {
+          role: messageData.role,
+          content: messageData.content,
+        },
+      ],
     });
+
     for (const context of additionalContext ?? []) {
       await sendMessage(thread.id, 'assistant', context);
     }
     return thread.id;
   } else {
-    return (await client.beta.threads.create()).id;
+    const thread = await client.beta.threads.create({
+      messages: [
+        {
+          role: 'assistant',
+          content: 'First message from assistant',
+        },
+      ],
+    });
+
+    for (const context of additionalContext ?? []) {
+      await sendMessage(thread.id, 'assistant', context);
+    }
+
+    return thread.id;
   }
 }
 
-export async function handleGenerateAnswer(messageData: AssistantMessageData): Promise<NewMessage> {
+export async function handleGenerateAnswer(
+  messageData: AssistantMessageData,
+): Promise<NewMessage> {
   await sendMessage(messageData.threadId, 'user', messageData.messageText);
 
   try {
-    let run = await client.beta.threads.runs.createAndPoll(messageData.threadId, {
-      assistant_id: messageData.assistantId
-    });
+    let run = await client.beta.threads.runs.createAndPoll(
+      messageData.threadId,
+      {
+        assistant_id: messageData.assistantId,
+      },
+    );
 
     if (run.status === 'completed') {
       const answer = await getLastReply(messageData.threadId);
-      console.log('Answer from AI: ', answer)
+      console.log('Answer from AI: ', answer);
 
       return {
         thread_id: messageData.threadId,
@@ -45,10 +69,15 @@ export async function handleGenerateAnswer(messageData: AssistantMessageData): P
             ? answer.content[0].text?.value
             : '',
         created_at: new Date(),
-      }
+      };
     } else {
-      console.error(`OpenAI run.status for thread ${messageData.threadId}: `, run.status);
-      throw new Error(`OpenAI run.status for thread ${messageData.threadId}: ` + run.status);
+      console.error(
+        `OpenAI run.status for thread ${messageData.threadId}: `,
+        run.status,
+      );
+      throw new Error(
+        `OpenAI run.status for thread ${messageData.threadId}: ` + run.status,
+      );
     }
   } catch (error) {
     console.error('Error getting answer from OpenAI:', error);
@@ -56,37 +85,36 @@ export async function handleGenerateAnswer(messageData: AssistantMessageData): P
   }
 }
 
-export async function sendMessage(threadId: string, role: 'user' | 'assistant', content: string) {
-  return await client.beta.threads.messages.create(
-    threadId,
-    {
-      role: role,
-      content: content,
-    }
-  );
+export async function sendMessage(
+  threadId: string,
+  role: 'user' | 'assistant',
+  content: string,
+) {
+  return await client.beta.threads.messages.create(threadId, {
+    role: role,
+    content: content,
+  });
 }
 
 async function getAllMessages(threadId: string) {
   let allMessages = [];
   let cursor: string | undefined = undefined;
-  
+
   while (true) {
-    console.log("iterating over answers...")
-    const messages: OpenAI.Beta.Threads.Messages.MessagesPage = await client.beta.threads.messages.list(
-      threadId, 
-      { 
+    console.log('iterating over answers...');
+    const messages: OpenAI.Beta.Threads.Messages.MessagesPage =
+      await client.beta.threads.messages.list(threadId, {
         limit: 100,
-        after: cursor, 
-        order: 'asc'
-      }
-    );
-    
+        after: cursor,
+        order: 'asc',
+      });
+
     allMessages.push(...messages.data);
-    
+
     if (!messages.data || messages.data.length === 0) break;
     cursor = messages.data[messages.data.length - 1].id;
   }
-  
+
   return allMessages;
 }
 
@@ -105,10 +133,12 @@ export async function getGPTCompletion(instructions: string): Promise<string> {
 }
 
 async function getLastReply(threadId: string) {
-  return (await client.beta.threads.messages.list(threadId, {
-    limit: 1,
-    order: 'desc',
-  })).data[0];
+  return (
+    await client.beta.threads.messages.list(threadId, {
+      limit: 1,
+      order: 'desc',
+    })
+  ).data[0];
 }
 
 export async function deleteAssistants(idsToDelete: string[]) {
@@ -118,96 +148,141 @@ export async function deleteAssistants(idsToDelete: string[]) {
   });
 }
 
-export async function handleResponse(client: OpenAI, threadId: string, assistantId: string, instructions: string, stream: boolean) {
+export async function handleResponse(
+  client: OpenAI,
+  threadId: string,
+  assistantId: string,
+  instructions: string,
+  stream: boolean,
+) {
   if (stream) {
-    const streamData = streamResponse(client, threadId, assistantId, instructions);
+    const streamData = streamResponse(
+      client,
+      threadId,
+      assistantId,
+      instructions,
+    );
     return new NextResponse(streamData, {
       headers: {
         'Content-Type': 'text/event-stream',
         'Cache-Control': 'no-cache',
-        'Connection': 'keep-alive',
+        Connection: 'keep-alive',
       },
     });
   } else {
-    const response = await finishedResponse(client, threadId, assistantId, instructions);
+    const response = await finishedResponse(
+      client,
+      threadId,
+      assistantId,
+      instructions,
+    );
     console.log('response from finishedResponse:', response);
     return NextResponse.json({ fullPrompt: response });
   }
 }
 
-export async function finishedResponse(client: OpenAI, threadId: string, assistantId: string, instructions: string) {
+export async function finishedResponse(
+  client: OpenAI,
+  threadId: string,
+  assistantId: string,
+  instructions: string,
+) {
   console.log('threadId:', threadId);
   console.log('assistantId:', assistantId);
   console.log('instructions:', instructions);
-  
+
   await client.beta.threads.messages.create(threadId, {
-    role: "user",
-    content: instructions
-  })
+    role: 'user',
+    content: instructions,
+  });
 
-  const run = await client.beta.threads.runs.create(threadId, { assistant_id: assistantId })
-  await waitForRunCompletion(client, threadId, run.id)
+  const run = await client.beta.threads.runs.create(threadId, {
+    assistant_id: assistantId,
+  });
+  await waitForRunCompletion(client, threadId, run.id);
 
-  const messages = await client.beta.threads.messages.list(threadId)
-  const content = getTextContent(messages.data[0].content)
+  const messages = await client.beta.threads.messages.list(threadId);
+  const content = getTextContent(messages.data[0].content);
   console.log('Generated FullPrompt Content: ', content);
 
-  return content
+  return content;
 }
 
-export async function waitForRunCompletion(client: OpenAI, threadId: string, runId: string) {
+export async function waitForRunCompletion(
+  client: OpenAI,
+  threadId: string,
+  runId: string,
+) {
   while (true) {
-    const run = await client.beta.threads.runs.retrieve(threadId, runId)
+    const run = await client.beta.threads.runs.retrieve(threadId, runId);
     if (run.status === 'completed') {
-      return
+      return;
     } else if (run.status === 'failed' || run.status === 'cancelled') {
-      throw new Error(`Run ${runId} ${run.status}`)
+      throw new Error(`Run ${runId} ${run.status}`);
     }
     // Wait for 1 second before checking again
-    await new Promise(resolve => setTimeout(resolve, 1000))
+    await new Promise((resolve) => setTimeout(resolve, 1000));
   }
 }
 
-function streamResponse(client: OpenAI, threadId: string, assistantId: string, instructions: string) {
-  const encoder = new TextEncoder()
+function streamResponse(
+  client: OpenAI,
+  threadId: string,
+  assistantId: string,
+  instructions: string,
+) {
+  const encoder = new TextEncoder();
 
   return new ReadableStream({
     async start(controller) {
       await client.beta.threads.messages.create(threadId, {
-        role: "user",
-        content: instructions
-      })
+        role: 'user',
+        content: instructions,
+      });
 
-      const run = await client.beta.threads.runs.create(threadId, { assistant_id: assistantId })
+      const run = await client.beta.threads.runs.create(threadId, {
+        assistant_id: assistantId,
+      });
 
       while (true) {
-        const runStatus = await client.beta.threads.runs.retrieve(threadId, run.id)
-        
+        const runStatus = await client.beta.threads.runs.retrieve(
+          threadId,
+          run.id,
+        );
+
         if (runStatus.status === 'completed') {
-          const messages = await client.beta.threads.messages.list(threadId)
-          const content = getTextContent(messages.data[0].content)
-          controller.enqueue(encoder.encode(content))
-          break
-        } else if (runStatus.status === 'failed' || runStatus.status === 'cancelled') {
-          controller.error('Run failed or was cancelled')
-          break
+          const messages = await client.beta.threads.messages.list(threadId);
+          const content = getTextContent(messages.data[0].content);
+          controller.enqueue(encoder.encode(content));
+          break;
+        } else if (
+          runStatus.status === 'failed' ||
+          runStatus.status === 'cancelled'
+        ) {
+          controller.error('Run failed or was cancelled');
+          break;
         }
 
         // If the run is still in progress, we can optionally send partial results here
         // For now, we'll just wait and check again
-        console.log("Waiting for status update. Run Status: ", runStatus.status)
-        await new Promise(resolve => setTimeout(resolve, 1000))
+        console.log(
+          'Waiting for status update. Run Status: ',
+          runStatus.status,
+        );
+        await new Promise((resolve) => setTimeout(resolve, 1000));
       }
 
-      controller.close()
-    }
-  })
+      controller.close();
+    },
+  });
 }
 
-function getTextContent(content: OpenAI.Beta.Threads.Messages.MessageContent[]): string {
-  const textContent = content.find(item => item.type === 'text')
+function getTextContent(
+  content: OpenAI.Beta.Threads.Messages.MessageContent[],
+): string {
+  const textContent = content.find((item) => item.type === 'text');
   if (textContent && 'text' in textContent) {
-    return textContent.text.value
+    return textContent.text.value;
   }
-  throw new Error('No text content found in the message')
+  throw new Error('No text content found in the message');
 }
diff --git a/src/app/chat/StandaloneChat.tsx b/src/app/chat/StandaloneChat.tsx
index 3a5ce55..7abf3d2 100644
--- a/src/app/chat/StandaloneChat.tsx
+++ b/src/app/chat/StandaloneChat.tsx
@@ -1,24 +1,19 @@
 'use client';
 
 import { memo, useEffect, useState } from 'react';
-
-import Chat from '@/components/chat';
 import { useSearchParams } from 'next/navigation';
 import { useSessionStore } from '@/stores/SessionStore';
-import { Button } from '@/components/ui/button';
-import Link from 'next/link';
-import { Loader2, HelpCircle } from 'lucide-react';
+import { useUser } from '@auth0/nextjs-auth0/client';
+import { OpenAIMessage } from '@/lib/types';
 import {
   getHostSessionById,
   increaseSessionsCount,
-  updateHostSession,
   updateUserSession,
 } from '@/lib/db';
-import { sql } from 'kysely';
-import { useUser } from '@auth0/nextjs-auth0/client';
-import { OpenAIMessage } from '@/lib/types';
-import { encryptId } from '@/lib/encryptionUtils';
-import { PoweredByHarmonica } from '@/components/icons';
+import { LoadingOverlay } from '@/components/chat/LoadingOverlay';
+import { SessionModal } from '@/components/chat/SessionModal';
+import { ChatInterface } from '@/components/chat/ChatInterface';
+import { QuestionInfo } from 'app/create/types';
 
 const StandaloneChat = () => {
   const [message, setMessage] = useState<OpenAIMessage>({
@@ -29,7 +24,6 @@ Please type your name or "anonymous" if you prefer
   });
 
   const { user } = useUser();
-
   const searchParams = useSearchParams();
   const sessionId = searchParams.get('s');
   const assistantId = searchParams.get('a');
@@ -45,6 +39,7 @@ Please type your name or "anonymous" if you prefer
   const [isLoading, setIsLoading] = useState(true);
   const [isFirstMessage, setIsFirstMessage] = useState(true);
   const [isMounted, setIsMounted] = useState(false);
+  const [userContext, setUserContext] = useState<Record<string, string>>({});
 
   useEffect(() => {
     setIsMounted(true);
@@ -91,7 +86,7 @@ Please type your name or "anonymous" if you prefer
     }
 
     return () => window.removeEventListener('message', handleMessage);
-  }, [sessionId, hostData]);
+  }, [sessionId, hostData, addHostData]);
 
   useEffect(() => {
     if (isFirstMessage && message.role === 'assistant') {
@@ -99,8 +94,6 @@ Please type your name or "anonymous" if you prefer
     }
   }, [message, isFirstMessage]);
 
-  const sessionClosed = !hostData?.active;
-
   useEffect(() => {
     const chatContainer = document.getElementById('chat-container');
 
@@ -125,215 +118,59 @@ Please type your name or "anonymous" if you prefer
     };
   }, []);
 
+  if (isLoading) {
+    return <LoadingOverlay />;
+  }
+
   return (
     <div
       className="flex flex-col md:flex-row bg-purple-50"
-      style={{
-        height: 'calc(100vh - 100px)',
-      }}
+      style={{ height: 'calc(100vh - 100px)' }}
     >
       <div className="hidden">
         <div data-tf-live="01JB9CRNXPX488VHX879VNF3E6"></div>
         <script src="//embed.typeform.com/next/embed.js"></script>
       </div>
-      {isLoading ? (
-        <div className="fixed inset-0 bg-white bg-opacity-75 flex items-center justify-center z-50">
-          <Loader2 className="w-8 h-8 animate-spin text-gray-600" />
-        </div>
+
+      {showModal ? (
+        <SessionModal
+          userFinished={userFinished}
+          sessionClosed={!hostData?.active}
+          sessionId={sessionId}
+          user={user}
+          hostData={
+            hostData
+              ? {
+                  topic: hostData.topic,
+                  questions: hostData.questions as unknown as QuestionInfo[],
+                }
+              : undefined
+          }
+          onStart={(answers?: Record<string, string>) => {
+            setUserContext(answers || {});
+            setShowModal(false);
+          }}
+        />
       ) : (
-        <>
-          {showModal ? (
-            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
-              <div className="bg-white p-4 sm:p-6 md:p-10 rounded-lg w-[calc(100%-2rem)] h-[calc(100%-2rem)] flex items-center justify-center m-4 overflow-y-auto">
-                <div className="max-w-6xl w-full">
-                  {userFinished ? (
-                    <div className="flex flex-col items-center justify-center">
-                      <h2 className="text-xl font-bold mb-4">
-                        Thank You for Your Participation!
-                      </h2>
-                      <p className="mb-4">
-                        We appreciate your input. Please wait until all
-                        participants have finished to receive the final report.
-                      </p>
-                      {user && user.sub && (
-                        <Link
-                          href={`/sessions/${encryptId(sessionId!)}`}
-                          passHref
-                        >
-                          <Button size="lg" className="mt-4">
-                            View Session Results
-                          </Button>
-                        </Link>
-                      )}
-                    </div>
-                  ) : (
-                    <div className="flex flex-col lg:flex-row">
-                      <div className="w-full lg:w-1/2 lg:pr-6 flex flex-col justify-between mb-6 lg:mb-0">
-                        <div>
-                          <h2 className="text-xl sm:text-2xl font-bold mb-4 sm:mb-6">
-                            {sessionClosed
-                              ? 'Session Complete'
-                              : 'You are invited to share your thoughts'}
-                          </h2>
-                          <p
-                            className={`mb-6 ${sessionClosed ? 'sm:mb-8' : ''}`}
-                          >
-                            {sessionClosed
-                              ? 'You can create a new session on any topic and invite others to participate.'
-                              : 'Welcome to our interactive session! We value your input and would love to hear your thoughts on the topic at hand. Your responses will be combined with others to create an AI-powered overview.'}
-                          </p>
-                          {sessionClosed ? (
-                            <div className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mt-4 sm:mt-8">
-                              {user && user.sub && (
-                                <Link
-                                  href={`/sessions/${encryptId(sessionId!)}`}
-                                  passHref
-                                  className="w-full sm:w-auto"
-                                >
-                                  <Button
-                                    size="lg"
-                                    className="w-full sm:w-auto"
-                                  >
-                                    View Session Results
-                                  </Button>
-                                </Link>
-                              )}
-                              <Link
-                                href="/create"
-                                passHref
-                                className="w-full sm:w-auto"
-                              >
-                                <Button
-                                  size="lg"
-                                  variant="ghost"
-                                  className="w-full sm:w-auto"
-                                >
-                                  Start a New Session
-                                </Button>
-                              </Link>
-                            </div>
-                          ) : (
-                            <Button
-                              onClick={() => setShowModal(false)}
-                              size="lg"
-                              className="mt-4"
-                            >
-                              Get Started
-                            </Button>
-                          )}
-                        </div>
-                        <p className="text-sm text-gray-500 mt-2">
-                          Powered by{' '}
-                          <Link
-                            href="https://harmonica.chat"
-                            target="blank"
-                            className="underline"
-                          >
-                            Harmonica
-                          </Link>
-                        </p>
-                      </div>
-                      {!sessionClosed && (
-                        <div className="hidden lg:block w-full lg:w-1/2 lg:pl-8 lg:border-l border-t lg:border-t-0 pt-6 lg:pt-0">
-                          <h3 className="text-lg font-semibold mb-4">
-                            How to use
-                          </h3>
-                          <ol className="space-y-4 text-sm text-gray-600">
-                            <li>
-                              <h4 className="font-medium">
-                                1. Answer Questions
-                              </h4>
-                              <p>
-                                Respond to the AI's prompts with your thoughts
-                                and ideas. Be as detailed as you'd like.
-                              </p>
-                            </li>
-                            <li>
-                              <h4 className="font-medium">
-                                2. Engage in Dialogue
-                              </h4>
-                              <p>
-                                Feel free to ask questions or request
-                                clarification. The AI is here to guide you
-                                through the process.
-                              </p>
-                            </li>
-                            <li>
-                              <h4 className="font-medium">
-                                3. Review and Submit
-                              </h4>
-                              <p>
-                                Once you've shared your thoughts, review your
-                                responses and submit them to contribute to the
-                                collective insights.
-                              </p>
-                            </li>
-                          </ol>
-                        </div>
-                      )}
-                    </div>
-                  )}
-                </div>
-              </div>
-            </div>
-          ) : (
-            <div
-              id="chat-container"
-              className="flex flex-col w-full h-full fixed inset-0 z-50 md:flex-row md:relative bg-purple-50"
-            >
-              <div className="w-full md:w-1/4 p-6 pb-3 md:pb-6">
-                <p className="text-sm text-muted-foreground mb-2 hidden md:block">
-                  Your Session
-                </p>
-                <div className="flex items-center md:items-start md:flex-col justify-between w-full">
-                  <h1 className="text-xl font-semibold mb-0 overflow-hidden text-ellipsis whitespace-nowrap">
-                    {hostData?.topic ?? 'Test'}
-                  </h1>
-                  {isMounted && !isLoading && (
-                    <div className="flex items-center">
-                      <Button
-                        onClick={finishSession}
-                        variant="outline"
-                        className="text-sm md:text-base mt-0 md:mt-4"
-                      >
-                        Finish
-                      </Button>
-                      <Link
-                        href="https://oldspeak.notion.site/Help-Center-fcf198f4683b4e3099beddf48971bd40"
-                        target="_blank"
-                        rel="noopener noreferrer"
-                      >
-                        <Button
-                          variant="outline"
-                          className="md:hidden w-10 h-10 p-2.5 ms-2 flex items-center justify-center rounded-full text-sm md:text-base mt-0"
-                        >
-                          <HelpCircle className="text-lg" />
-                        </Button>
-                      </Link>
-                    </div>
-                  )}
-                </div>
-              </div>
-              <hr className="md:hidden border-t border-white ms-4 me-4" />
-              <div className="w-full md:w-3/4 h-full flex-grow flex flex-col px-6 pt-3 md:pb-6">
-                <div className="h-full max-h-[calc(100%-150px)] md:max-h-[calc(100%-50px)] max-w-2xl flex m-4">
-                  {(hostData?.template || assistantId) && (
-                    <Chat
-                      entryMessage={message}
-                      assistantId={hostData?.template ?? assistantId!}
-                      sessionId={hostData?.id}
-                      userSessionId={userSessionId ?? undefined}
-                      setUserSessionId={setUserSessionId}
-                    />
-                  )}
-                </div>
-              </div>
-              <div className="md:hidden absolute bottom-0 w-full flex justify-center items-center pb-3">
-                <PoweredByHarmonica />
-              </div>
-            </div>
-          )}
-        </>
+        <ChatInterface
+          hostData={
+            hostData
+              ? {
+                  topic: hostData.topic,
+                  template: hostData.template,
+                  id: hostData.id,
+                }
+              : {}
+          }
+          userSessionId={userSessionId}
+          setUserSessionId={setUserSessionId}
+          onFinish={finishSession}
+          isMounted={isMounted}
+          isLoading={isLoading}
+          message={message}
+          assistantId={assistantId ?? undefined}
+          userContext={userContext}
+        />
       )}
     </div>
   );
diff --git a/src/app/create/creationFlow.tsx b/src/app/create/creationFlow.tsx
index 2792bfb..878a7a8 100644
--- a/src/app/create/creationFlow.tsx
+++ b/src/app/create/creationFlow.tsx
@@ -183,7 +183,16 @@ export default function CreationFlow() {
       active: mode === 'launch', // Set active based on mode
       final_report_sent: false,
       start_time: new Date(),
-      questions: JSON.stringify(participantQuestions) as unknown as JSON,
+      questions: JSON.stringify(
+        participantQuestions.map((q) => ({
+          id: q.id,
+          label: q.label,
+          type: q.type,
+          typeValue: q.typeValue,
+          required: q.required,
+          options: q.options,
+        })),
+      ) as unknown as JSON,
     };
 
     const sessionIds = await db.insertHostSessions(data);
diff --git a/src/app/create/review.tsx b/src/app/create/review.tsx
index f0cbe79..2c9f5f0 100644
--- a/src/app/create/review.tsx
+++ b/src/app/create/review.tsx
@@ -137,7 +137,10 @@ export default function ReviewPrompt({
                     >
                       Full Prompt
                     </Button> */}
-                    <ChatPopupButton prompt={prompt} handleSetTempAssistantIds={setTemporaryAssistantIds} />
+                    <ChatPopupButton
+                      prompt={prompt}
+                      handleSetTempAssistantIds={setTemporaryAssistantIds}
+                    />
                     {prompt.id !== currentVersion ? (
                       <Button onClick={() => setCurrentVersion(prompt.id)}>
                         Select
diff --git a/src/app/create/types.ts b/src/app/create/types.ts
index b23f3fc..0011cda 100644
--- a/src/app/create/types.ts
+++ b/src/app/create/types.ts
@@ -1,7 +1,7 @@
 export enum QuestionType {
   SHORT_FIELD = 'Short field',
   EMAIL = 'Email',
-  OPTIONS = 'Options'
+  OPTIONS = 'Options',
 }
 
 // Add a type guard to ensure proper serialization
@@ -20,4 +20,4 @@ export interface QuestionInfo {
 }
 
 export const STEPS = ['Template', 'Create', 'Refine', 'Share'] as const;
-export type Step = (typeof STEPS)[number]; 
\ No newline at end of file
+export type Step = (typeof STEPS)[number];
diff --git a/src/components/SessionResult/ParticipantSessionRow.tsx b/src/components/SessionResult/ParticipantSessionRow.tsx
index 6668de6..a3370a5 100644
--- a/src/components/SessionResult/ParticipantSessionRow.tsx
+++ b/src/components/SessionResult/ParticipantSessionRow.tsx
@@ -20,16 +20,16 @@ export default function ParicipantSessionRow({
   const handleViewClick = async () => {
     setIsPopupVisible(true);
     const messageHistory = await getAllChatMessagesInOrder(userData.thread_id);
-    // console.log('Messages fetched: ', messageHistory);
+
     if (messageHistory.length === 0) {
       console.error(
         'No messages found for ',
         userData.thread_id,
-        ' but it should be there!'
+        ' but it should be there!',
       );
       return;
     }
-    removeFirstFakeUserEntry(messageHistory);
+
     setMessages(messageHistory);
   };
 
@@ -38,21 +38,6 @@ export default function ParicipantSessionRow({
     setIsPopupVisible(false);
   };
 
-  // const userName = session.chat_text
-  //   ? extractName(session.chat_text)
-  //   : `User ${session.user_id}`;
-
-  // All users passed into this method should also have some messages.
-
-  function removeFirstFakeUserEntry(messages: Message[]) {
-    if (
-      messages[0].role === 'user' &&
-      messages[0].content.startsWith('User name is ')
-    ) {
-      messages.shift();
-    }
-  }
-
   function parseMessages(input: string) {
     try {
       const regex =
diff --git a/src/components/chat.tsx b/src/components/chat.tsx
index ff88314..b2cb93b 100644
--- a/src/components/chat.tsx
+++ b/src/components/chat.tsx
@@ -11,6 +11,7 @@ import { Send } from './icons';
 import { useUser } from '@auth0/nextjs-auth0/client';
 import { Message } from '@/lib/schema_updated';
 import ErrorPage from './Error';
+import { getUserNameFromContext } from '@/lib/utils';
 
 export default function Chat({
   assistantId,
@@ -19,8 +20,8 @@ export default function Chat({
   userSessionId,
   entryMessage,
   context,
-  userNameInFirstMessage = true,
   placeholderText,
+  userContext,
 }: {
   assistantId: string;
   sessionId?: string;
@@ -28,29 +29,15 @@ export default function Chat({
   userSessionId?: string;
   entryMessage?: OpenAIMessage;
   context?: OpenAIMessageWithContext;
-  userNameInFirstMessage?: boolean;
   placeholderText?: string;
-  }) {
-  const [errorMessage, setErrorMessage] = useState<{ title: string, message: string } | null>(null)
+  userContext?: Record<string, string>;
+}) {
+  const [errorMessage, setErrorMessage] = useState<{
+    title: string;
+    message: string;
+  } | null>(null);
   const [errorToastMessage, setErrorToastMessage] = useState('');
   const { user } = useUser();
-  const defaultEntryMessage: OpenAIMessage = {
-    role: 'assistant',
-    content: `Nice to meet you! Before we get started, here are a few things to keep in mind
-
-I’m going to ask you a few questions to help structure your contribution to this session.
-
-✨ After you share your thoughts, we’ll synthesize these with feedback from other participants to create an AI-powered overview
-
-🗣️ We’d love to see as much detail as possible, though even a few sentences are helpful. You can skip any questions simply by asking to move on.
-
-Help & Support:
-
-🌱 Harmonica is still in the early stages of development, so we would appreciate your patience and feedback
-
-💬 Could you please let me know your name?
-`,
-  };
 
   const placeholder = placeholderText
     ? placeholderText
@@ -60,18 +47,15 @@ Help & Support:
     messageText: '',
   });
   const threadIdRef = useRef<string>('');
-  const [messages, setMessages] = useState<OpenAIMessage[]>([
-    entryMessage ? entryMessage : defaultEntryMessage,
-  ]);
+  const [messages, setMessages] = useState<OpenAIMessage[]>([]);
   const addMessage = (newMessage: OpenAIMessage) => {
     setMessages((prevMessages) => [...prevMessages, newMessage]);
   };
 
   const [isLoading, setIsLoading] = useState(false);
-  const [userName, setUserName] = useState('');
   const textareaRef = useRef<HTMLTextAreaElement>(null);
   const messagesEndRef = useRef<HTMLDivElement>(null);
-  
+
   useEffect(() => {
     if (messagesEndRef.current && messages.length > 1) {
       messagesEndRef.current.scrollIntoView({
@@ -82,7 +66,7 @@ Help & Support:
   }, [messages]);
 
   const handleInputChange = (
-    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
+    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
   ) => {
     setFormData({ ...formData, [e.target.name]: e.target.value });
   };
@@ -92,11 +76,8 @@ Help & Support:
   const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
     if (!threadIdRef.current && !createThreadInProgressRef.current) {
       createThreadInProgressRef.current = true;
-      createThread(
-        context,
-        sessionId,
-        user,
-      );
+      const userName = getUserNameFromContext(userContext);
+      createThread(context, sessionId, user, userName, userContext);
     }
 
     if (e.key === 'Enter' && !isLoading) {
@@ -124,7 +105,7 @@ Help & Support:
 
   function concatenateMessages(messagesFromOneUser: Message[]) {
     messagesFromOneUser.sort(
-      (a, b) => a.created_at.getTime() - b.created_at.getTime()
+      (a, b) => a.created_at.getTime() - b.created_at.getTime(),
     );
     return messagesFromOneUser
       .map((message) => `${message.role} : ${message.content}`)
@@ -134,136 +115,211 @@ Help & Support:
   async function createThread(
     context: OpenAIMessageWithContext | undefined,
     sessionId: string | undefined,
-    user: any
+    user: any,
+    userName?: string,
+    userContext?: Record<string, string>,
   ) {
-    console.log('creating thread');
     const chatMessages = [];
     if (context?.userData) {
-      const allUsersMessages = await db.getAllMessagesForUsersSorted(context.userData);
-      const messagesByThread = allUsersMessages.reduce((acc, message) => {
-        acc[message.thread_id] = acc[message.thread_id] || []; // to make sure this array exists
-        acc[message.thread_id].push(message);
-        return acc;
-      }, {} as Record<string, Message[]>);
+      const allUsersMessages = await db.getAllMessagesForUsersSorted(
+        context.userData,
+      );
+      const messagesByThread = allUsersMessages.reduce(
+        (acc, message) => {
+          acc[message.thread_id] = acc[message.thread_id] || []; // to make sure this array exists
+          acc[message.thread_id].push(message);
+          return acc;
+        },
+        {} as Record<string, Message[]>,
+      );
       chatMessages.push('\n----START CHAT HISTORY for CONTEXT----\n');
       const concatenatedUserMessages = Object.entries(messagesByThread).map(
         ([threadId, messages]) => {
           return `\n----START NEXT USER CHAT----\n${concatenateMessages(messages)}\n----END USER CHAT----\n`;
-        }
+        },
       );
       chatMessages.push(...concatenatedUserMessages);
       chatMessages.push('\n----END CHAT HISTORY for CONTEXT----\n');
+      // console.log('[i] Chat messages for context: ', chatMessages);
     }
-    gpt.handleCreateThread(context, chatMessages)
+    console.log('[i] User context: ', userContext);
+    const userContextPrompt = userContext
+      ? `IMPORTANT USER INFORMATION:\nPlease consider the following user details in your responses:\n${Object.entries(
+          userContext,
+        )
+          .map(([key, value]) => `- ${key}: ${value}`)
+          .join(
+            '\n',
+          )}\n\nPlease tailor your responses appropriately based on this user information.`
+      : '';
+
+    let threadEntryMessage = userContextPrompt
+      ? {
+          role: 'user' as const,
+          content: userContextPrompt,
+        }
+      : undefined;
+
+    return gpt
+      .handleCreateThread(threadEntryMessage, chatMessages)
       .then((threadId) => {
-        console.log('Created threadId ', threadId)
+        // console.log('[i] Created threadId ', threadId, sessionId);
         threadIdRef.current = threadId;
 
         if (sessionId) {
           const data = {
             session_id: sessionId,
-            user_id: user?.email ?? 'anonymous',
+            user_id: user,
+            user_name: userName,
             thread_id: threadId,
             active: true,
             start_time: new Date(),
             last_edit: new Date(),
           };
           console.log('Inserting new session with initial data: ', data);
-          db.insertUserSessions(data)
+          return db
+            .insertUserSessions(data)
             .then((ids) => {
               if (ids[0] && setUserSessionId) setUserSessionId(ids[0]);
+              return ids[0]; // Return the sessionId
             })
             .catch((error) => {
               console.error('[!] error creating user session -> ', error);
-              setErrorMessage({ title: 'Failed to create session', message: 'Oops, that should not have happened. Please try again.' })
+              setErrorMessage({
+                title: 'Failed to create session',
+                message:
+                  'Oops, that should not have happened. Please try again.',
+              });
+              throw error; // Re-throw the error to be caught by the caller
             });
         }
+        return undefined; // Return undefined if no sessionId was provided
       })
       .catch((error) => {
         console.error(error);
-        setErrorMessage({ title: 'Failed to create message thread', message: 'Sorry for the inconvenience. Please try again.'})
+        setErrorMessage({
+          title: 'Failed to create message thread',
+          message: 'Sorry for the inconvenience. Please try again.',
+        });
+        throw error; // Re-throw the error to be caught by the caller
       });
   }
 
-  const handleSubmit = async (e: React.FormEvent) => {
-    e.preventDefault();
-    setIsLoading(true);
-    let messageText = formData.messageText;
-    // This makes the message show up in the chat window:
-    addMessage({
-      role: 'user',
-      content: messageText,
-    });
-
-    setFormData({ messageText: '' });
-    if (textareaRef.current) {
-      textareaRef.current.focus();
+  useEffect(() => {
+    if (
+      userContext &&
+      !threadIdRef.current &&
+      !createThreadInProgressRef.current
+    ) {
+      const userName = getUserNameFromContext(userContext);
+
+      createThreadInProgressRef.current = true;
+      createThread(context, sessionId, user, userName, userContext).then(
+        (threadSessionId) => {
+          handleSubmit(undefined, true, threadSessionId);
+        },
+      );
     }
+  }, [userContext]);
 
-    if (userNameInFirstMessage && messages.length === 1) {
-      const userName = messageText;
-      setUserName(userName);
-      if (userSessionId) {
-        db.updateUserSession(userSessionId, {
-          user_name: userName,
-        }).catch(error => showErrorToast('Oops, something went wrong setting your username. Please just continue'));
-      }
-      messageText = `User name is ${userName}. Use it in communication. Don't ask it again. Start the session.`;
+  const handleSubmit = async (
+    e?: React.FormEvent,
+    isAutomatic?: boolean,
+    threadSessionId?: string,
+  ) => {
+    if (e) {
+      e.preventDefault();
     }
 
-    const now = new Date();
-    let waitedCycles = 0;
-    while (!threadIdRef.current) {
-    // At this point, the thread should already be created, but just in case it's still in progress, let's add some wait in here:
-      if (waitedCycles > 20) {
-        setErrorMessage({ title: 'The chat seems to be stuck.', message: 'Please reload the page and try again.' });
+    if (isLoading) return;
+    setIsLoading(true);
+
+    try {
+      const messageText = isAutomatic
+        ? "Let's begin."
+        : formData.messageText.trim();
+
+      if (!messageText && !isAutomatic) return;
+
+      if (!isAutomatic) {
+        addMessage({ role: 'user', content: messageText });
+        setFormData({ messageText: '' });
+        textareaRef.current?.focus();
       }
-      await new Promise((resolve) => setTimeout(resolve, 1000));
-      waitedCycles++;
-      console.log(`Waiting ${waitedCycles}s for thread to be created...`);
-    }
-    console.log('Got threadId: ', threadIdRef.current);
-    const messageData = {
-      threadId: threadIdRef.current,
-      messageText,
-      assistantId: assistantId,
-    };
-    if (userSessionId) {
-      db.insertChatMessage({
-        thread_id: threadIdRef.current,
-        role: 'user',
-        content: messageText,
-        created_at: now
-      }).catch(error => {
-        console.log('Error in insertChatMessage: ', error);
-        showErrorToast('Oops, something went wrong storing your message. This is uncomfortable; but please just continue if you can');
-      });
-    }
 
-    gpt.handleGenerateAnswer(messageData)
-      .then((answer) => {
-        setIsLoading(false);
-        console.log('received answer from ChatGPT: ', answer)
-        const now = new Date();
-        addMessage(answer);
-        
-        if (userSessionId) {
-          Promise.all([
-            db.insertChatMessage(answer),
-            db.updateUserSession(userSessionId, {
-              last_edit: now,
-            })
-          ]).catch(error => {
-            console.log('Error storing answer or updating last edit: ', error);
-            showErrorToast(`Uhm; there should be an answer, but we couldn't store it. It won't show up in the summary, but everything else should be fine. Please continue.`);
+      const now = new Date();
+      let waitedCycles = 0;
+      while (!threadIdRef.current) {
+        if (waitedCycles > 20) {
+          setErrorMessage({
+            title: 'The chat seems to be stuck.',
+            message: 'Please reload the page and try again.',
           });
         }
-      })
-      .catch((error) => {
-        console.error(error);
-        showErrorToast(`Sorry, we failed to answer... Please try again.`);
-      })
-      .finally(() => setIsLoading(false));
+        await new Promise((resolve) => setTimeout(resolve, 1000));
+        waitedCycles++;
+        console.log(`Waiting ${waitedCycles}s for thread to be created...`);
+      }
+
+      if (userSessionId && !isAutomatic) {
+        db.insertChatMessage({
+          thread_id: threadIdRef.current,
+          role: 'user',
+          content: messageText,
+          created_at: now,
+        }).catch((error) => {
+          console.log('Error in insertChatMessage: ', error);
+          showErrorToast(
+            'Oops, something went wrong storing your message. This is uncomfortable; but please just continue if you can',
+          );
+        });
+      }
+
+      const messageData = {
+        threadId: threadIdRef.current,
+        messageText,
+        assistantId: assistantId,
+      };
+
+      gpt
+        .handleGenerateAnswer(messageData)
+        .then((answer) => {
+          setIsLoading(false);
+          const now = new Date();
+          addMessage(answer);
+
+          if (userSessionId || threadSessionId) {
+            Promise.all([
+              db.insertChatMessage({
+                ...answer,
+                thread_id: threadIdRef.current,
+                created_at: now,
+              }),
+              userSessionId || threadSessionId
+                ? db.updateUserSession(userSessionId || threadSessionId!, {
+                    last_edit: now,
+                  })
+                : Promise.resolve(),
+            ]).catch((error) => {
+              console.log(
+                'Error storing answer or updating last edit: ',
+                error,
+              );
+              showErrorToast(
+                `Uhm; there should be an answer, but we couldn't store it. It won't show up in the summary, but everything else should be fine. Please continue.`,
+              );
+            });
+          }
+        })
+        .catch((error) => {
+          console.error(error);
+          showErrorToast(`Sorry, we failed to answer... Please try again.`);
+        })
+        .finally(() => setIsLoading(false));
+    } catch (error) {
+      console.error(error);
+      showErrorToast(`Sorry, we failed to answer... Please try again.`);
+    }
   };
 
   function showErrorToast(message: string) {
@@ -274,13 +330,16 @@ Help & Support:
   // Focus the textarea when the component mounts
   useEffect(() => {
     const textarea = textareaRef.current;
+    if (entryMessage) {
+      addMessage(entryMessage);
+    }
     if (textarea) {
       textarea.focus(); // Automatically focus the textarea
     }
   }, []);
 
   if (errorMessage) {
-    return <ErrorPage {...errorMessage}/> 
+    return <ErrorPage {...errorMessage} />;
   }
 
   return (
diff --git a/src/lib/utils.ts b/src/lib/utils.ts
index e21962c..46a5e4e 100644
--- a/src/lib/utils.ts
+++ b/src/lib/utils.ts
@@ -68,7 +68,7 @@ export async function createSummary(sessionId: string) {
         })
         .join(`\n----END Participant ${participantId}----\n`); // Join messages for the same participant
       return `\`\`\`\n----START Participant ${participantId}:----\n${participantMessages}\n\`\`\``; // Format for each participant
-    }
+    },
   );
 
   const promptForObjective = `\`\`\`This is the original session prompt, it _contains_ the **OBJECTIVE** somewhere in its body.\n
@@ -76,13 +76,13 @@ export async function createSummary(sessionId: string) {
   ----START PROMPT----\n
   ${prompt}
   \n----END PROMPT----\n\`\`\``;
-  console.log('Sending chat history to GPT-4: ', chatMessages);
+  // console.log('Sending chat history to GPT-4: ', chatMessages);
   const threadId = await gpt.handleCreateThread(
     {
       role: 'assistant',
       content: 'Use the following messages as context for user input.',
     },
-    [...chatMessages, promptForObjective]
+    [...chatMessages, promptForObjective],
   );
   const summaryReply = await gpt.handleGenerateAnswer({
     threadId: threadId,
@@ -102,7 +102,7 @@ export async function createSummary(sessionId: string) {
 
 export function checkSummaryAndMessageTimes(
   hostData: HostSession,
-  userData: UserSession[]
+  userData: UserSession[],
 ) {
   console.log('Checking for new messages...');
   const lastMessage = userData.reduce((latest, user) => {
@@ -113,14 +113,80 @@ export function checkSummaryAndMessageTimes(
   console.log('Last summary update:', hostData);
   const lastSummaryUpdate = hostData.last_edit.getTime();
   const hasNewMessages = lastMessage > lastSummaryUpdate;
-  return {hasNewMessages, lastMessage, lastSummaryUpdate}
+  return { hasNewMessages, lastMessage, lastSummaryUpdate };
 }
 
-export function getUserStats(sessionToUserStats: Record<string, Record<string, {num_messages: number, finished: boolean}>>, sessionId: string) {
+export function getUserStats(
+  sessionToUserStats: Record<
+    string,
+    Record<string, { num_messages: number; finished: boolean }>
+  >,
+  sessionId: string,
+) {
   const userStats = sessionToUserStats[sessionId];
   const iterableStats = Object.entries(userStats);
-  const usersWithMoreThan2Messages = iterableStats.filter(([_key, value]) => value.num_messages > 2);
+  const usersWithMoreThan2Messages = iterableStats.filter(
+    ([_key, value]) => value.num_messages > 2,
+  );
   const totalUsers = usersWithMoreThan2Messages.length;
-  const finishedUsers = usersWithMoreThan2Messages.filter(([_, value]) => value.finished).length;
-  return {totalUsers, finishedUsers}
+  const finishedUsers = usersWithMoreThan2Messages.filter(
+    ([_, value]) => value.finished,
+  ).length;
+  return { totalUsers, finishedUsers };
+}
+
+export function getUserNameFromContext(
+  userContext?: Record<string, string>,
+): string {
+  if (!userContext) return 'Anonymous User';
+
+  // Regex patterns for common username field variations
+  const patterns = [
+    /^name$/i,
+    /^(user)?name$/i,
+    /^(user|display)[\s_-]?name$/i,
+    /^(first|given)[\s_-]?name$/i,
+    /^(full|complete)[\s_-]?name$/i,
+    /^(preferred|nick)[\s_-]?name$/i,
+    /^(display|screen)[\s_-]?name$/i,
+    /^handle$/i,
+    /^alias$/i,
+    /^identity$/i,
+    /^(user)?id$/i,
+  ];
+
+  // Try primary patterns
+  for (const [key, value] of Object.entries(userContext)) {
+    if (patterns.some((pattern) => pattern.test(key)) && value) {
+      const cleanedValue = value.trim();
+      if (cleanedValue.length >= 2) return cleanedValue;
+    }
+  }
+
+  // Fallbacks
+  const nameKey = Object.keys(userContext).find(
+    (key) => /name/i.test(key) && userContext[key]?.trim().length >= 2,
+  );
+  if (nameKey) return userContext[nameKey].trim();
+
+  const emailKey = Object.keys(userContext).find(
+    (key) => /^email$/i.test(key) || /email/i.test(key),
+  );
+  if (emailKey && userContext[emailKey]) {
+    const emailParts = userContext[emailKey].split('@')[0];
+    if (emailParts.length >= 2) {
+      const cleanedEmail = emailParts
+        .replace(/[0-9._-]+$/, '')
+        .replace(/[._-]/g, ' ')
+        .trim();
+      if (cleanedEmail.length >= 2) {
+        return cleanedEmail
+          .split(' ')
+          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
+          .join(' ');
+      }
+    }
+  }
+
+  return `Anonymous${Math.floor(Math.random() * 9000 + 1000)}`;
 }
